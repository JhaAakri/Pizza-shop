{"ast":null,"code":"import { PLACE_ORDER, NEXT_STAGE, PICK_ORDER, CANCEL_ORDER, UPDATE_TIME } from './actions';\nconst initialState = {\n  orders: [],\n  totalDelivered: 0,\n  totalTime: '0 min 0 sec'\n};\nconst getNextStage = currentStage => {\n  switch (currentStage) {\n    case 'Order Placed':\n      return 'Order in Making';\n    case 'Order in Making':\n      return 'Order Ready';\n    case 'Order Ready':\n      return 'Order Picked';\n    default:\n      return currentStage;\n  }\n};\nconst getTimeInSeconds = stage => {\n  switch (stage) {\n    case 'Order Placed':\n      return 0;\n    case 'Order in Making':\n      return 4 * 60;\n    // 4 minutes for medium size, adjust as needed\n    case 'Order Ready':\n      return 3 * 60;\n    // 3 minutes for small size, adjust as needed\n    case 'Order Picked':\n      return 0;\n    default:\n      return 0;\n  }\n};\nconst calculateTotalTime = orders => {\n  const totalSeconds = orders.reduce((total, order) => total + order.timeInSeconds, 0);\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n  return `${minutes} min ${seconds} sec`;\n};\nconst pizzaReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PLACE_ORDER:\n      return {\n        ...state,\n        orders: [...state.orders, action.payload],\n        totalDelivered: state.totalDelivered + 1\n      };\n    case NEXT_STAGE:\n      return {\n        ...state,\n        orders: state.orders.map(order => {\n          if (order.id === action.payload) {\n            const nextStage = getNextStage(order.stage);\n            return {\n              ...order,\n              stage: nextStage,\n              time: order.stage === 'Order Placed' ? '0 min 0 sec' : order.time,\n              timeInSeconds: order.timeInSeconds + getTimeInSeconds(order.stage)\n            };\n          }\n          return order;\n        })\n      };\n    case PICK_ORDER:\n      return {\n        ...state,\n        orders: state.orders.map(order => {\n          if (order.id === action.payload) {\n            return {\n              ...order,\n              stage: 'Order Picked'\n            };\n          }\n          return order;\n        })\n      };\n    case CANCEL_ORDER:\n      return {\n        ...state,\n        orders: state.orders.filter(order => order.id !== action.payload)\n      };\n    case UPDATE_TIME:\n      return {\n        ...state,\n        totalTime: calculateTotalTime(state.orders)\n      };\n    default:\n      return state;\n  }\n};\nexport default pizzaReducer;","map":{"version":3,"names":["PLACE_ORDER","NEXT_STAGE","PICK_ORDER","CANCEL_ORDER","UPDATE_TIME","initialState","orders","totalDelivered","totalTime","getNextStage","currentStage","getTimeInSeconds","stage","calculateTotalTime","totalSeconds","reduce","total","order","timeInSeconds","minutes","Math","floor","seconds","pizzaReducer","state","action","type","payload","map","id","nextStage","time","filter"],"sources":["C:/Users/dell/Desktop/aakrii/Pizza_shop/pizza-shop/src/reducer.js"],"sourcesContent":["import { PLACE_ORDER, NEXT_STAGE, PICK_ORDER, CANCEL_ORDER, UPDATE_TIME } from './actions';\r\n\r\nconst initialState = {\r\n  orders: [],\r\n  totalDelivered: 0,\r\n  totalTime: '0 min 0 sec',\r\n};\r\n\r\nconst getNextStage = (currentStage) => {\r\n  switch (currentStage) {\r\n    case 'Order Placed':\r\n      return 'Order in Making';\r\n    case 'Order in Making':\r\n      return 'Order Ready';\r\n    case 'Order Ready':\r\n      return 'Order Picked';\r\n    default:\r\n      return currentStage;\r\n  }\r\n};\r\n\r\nconst getTimeInSeconds = (stage) => {\r\n  switch (stage) {\r\n    case 'Order Placed':\r\n      return 0;\r\n    case 'Order in Making':\r\n      return 4 * 60; // 4 minutes for medium size, adjust as needed\r\n    case 'Order Ready':\r\n      return 3 * 60; // 3 minutes for small size, adjust as needed\r\n    case 'Order Picked':\r\n      return 0;\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n\r\nconst calculateTotalTime = (orders) => {\r\n  const totalSeconds = orders.reduce((total, order) => total + order.timeInSeconds, 0);\r\n  const minutes = Math.floor(totalSeconds / 60);\r\n  const seconds = totalSeconds % 60;\r\n  return `${minutes} min ${seconds} sec`;\r\n};\r\n\r\nconst pizzaReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case PLACE_ORDER:\r\n      return {\r\n        ...state,\r\n        orders: [...state.orders, action.payload],\r\n        totalDelivered: state.totalDelivered + 1,\r\n      };\r\n    case NEXT_STAGE:\r\n      return {\r\n        ...state,\r\n        orders: state.orders.map((order) => {\r\n          if (order.id === action.payload) {\r\n            const nextStage = getNextStage(order.stage);\r\n            return {\r\n              ...order,\r\n              stage: nextStage,\r\n              time: order.stage === 'Order Placed' ? '0 min 0 sec' : order.time,\r\n              timeInSeconds: order.timeInSeconds + getTimeInSeconds(order.stage),\r\n            };\r\n          }\r\n          return order;\r\n        }),\r\n      };\r\n    case PICK_ORDER:\r\n      return {\r\n        ...state,\r\n        orders: state.orders.map((order) => {\r\n          if (order.id === action.payload) {\r\n            return {\r\n              ...order,\r\n              stage: 'Order Picked',\r\n            };\r\n          }\r\n          return order;\r\n        }),\r\n      };\r\n    case CANCEL_ORDER:\r\n      return {\r\n        ...state,\r\n        orders: state.orders.filter((order) => order.id !== action.payload),\r\n      };\r\n    case UPDATE_TIME:\r\n      return {\r\n        ...state,\r\n        totalTime: calculateTotalTime(state.orders),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default pizzaReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}